<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离-->
<mapper namespace="com.zxy.mapper.HotelMapper">

    <!--需求：通过id查询用户表的记录-->
    <!--
        1.标识映射文件中的sql，将sql语句封装到mapped statement对象中，所以称为statement的id
        2.parameterType：指定输入参数类型
        3.#{}：表示一个占位符
        4.#{id}：其中的id表示接收的输入参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以为value或者其他
        5.resultType：指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象
    -->
    <!--    执行查询用select标签，更新用update标签-->
    <!--    parameterType:参数类型 java.lang.Long为长整形-->
    <!--    resultType:返回值类型 这里返回结果为Fruit对象-->

    <select id="getAllHotel" parameterType="java.lang.String" resultType="com.zxy.entity.CityHotel">
        SELECT * FROM city_hotel where Cname=#{Cname}
    </select>

    <select id="insertHotel" parameterType="com.zxy.entity.CityHotel">
        insert into city_hotel(Cname,Hname,Hin,Himg) values (#{Cname},#{Hname},#{Hin},#{Himg})
    </select>

    <select id="getHotelByHname" parameterType="java.lang.String" resultType="com.zxy.entity.CityHotel">
        SELECT * FROM city_hotel WHERE Hname = #{Hname}
    </select>

    <update id="updateHotel" parameterType="com.zxy.entity.CityHotel">
        update city_hotel set Hname=#{Cname},Hin=#{Hin},Himg=#{Himg} where Hname=#{Hname}
    </update>
    <delete id="deleteHotel" parameterType="java.lang.String">
        delete from city_hotel where Hno = #{Hno}
    </delete>


</mapper>